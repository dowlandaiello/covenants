{
  "contract_name": "covenant-covenant",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "label",
      "pool_address",
      "preset_clock_fields",
      "preset_depositor_fields",
      "preset_holder_fields",
      "preset_ibc_fee",
      "preset_lp_fields",
      "preset_ls_fields",
      "timeouts"
    ],
    "properties": {
      "label": {
        "description": "contract label for this specific covenant",
        "type": "string"
      },
      "pool_address": {
        "description": "address of the liquidity pool we wish to interact with",
        "type": "string"
      },
      "preset_clock_fields": {
        "description": "instantiation fields relevant to clock module known in advance",
        "allOf": [
          {
            "$ref": "#/definitions/PresetClockFields"
          }
        ]
      },
      "preset_depositor_fields": {
        "description": "instantiation fields relevant to depositor module known in advance",
        "allOf": [
          {
            "$ref": "#/definitions/PresetDepositorFields"
          }
        ]
      },
      "preset_holder_fields": {
        "description": "instantiation fields relevant to holder module known in advance",
        "allOf": [
          {
            "$ref": "#/definitions/PresetHolderFields"
          }
        ]
      },
      "preset_ibc_fee": {
        "description": "neutron relayer fee structure",
        "allOf": [
          {
            "$ref": "#/definitions/PresetIbcFee"
          }
        ]
      },
      "preset_lp_fields": {
        "description": "instantiation fields relevant to lp module known in advance",
        "allOf": [
          {
            "$ref": "#/definitions/PresetLpFields"
          }
        ]
      },
      "preset_ls_fields": {
        "description": "instantiation fields relevant to ls module known in advance",
        "allOf": [
          {
            "$ref": "#/definitions/PresetLsFields"
          }
        ]
      },
      "timeouts": {
        "description": "ibc transfer and ica timeouts passed down to relevant modules",
        "allOf": [
          {
            "$ref": "#/definitions/Timeouts"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetData": {
        "description": "holds the native and ls asset denoms relevant for providing liquidity.",
        "type": "object",
        "required": [
          "ls_asset_denom",
          "native_asset_denom"
        ],
        "properties": {
          "ls_asset_denom": {
            "type": "string"
          },
          "native_asset_denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "PresetClockFields": {
        "type": "object",
        "required": [
          "clock_code",
          "label",
          "whitelist"
        ],
        "properties": {
          "clock_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "label": {
            "type": "string"
          },
          "tick_max_gas": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "PresetDepositorFields": {
        "type": "object",
        "required": [
          "atom_receiver_amount",
          "autopilot_format",
          "depositor_code",
          "gaia_neutron_ibc_transfer_channel_id",
          "gaia_stride_ibc_transfer_channel_id",
          "label",
          "neutron_atom_ibc_denom",
          "neutron_gaia_connection_id",
          "st_atom_receiver_amount"
        ],
        "properties": {
          "atom_receiver_amount": {
            "$ref": "#/definitions/WeightedReceiverAmount"
          },
          "autopilot_format": {
            "type": "string"
          },
          "depositor_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gaia_neutron_ibc_transfer_channel_id": {
            "type": "string"
          },
          "gaia_stride_ibc_transfer_channel_id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "neutron_atom_ibc_denom": {
            "type": "string"
          },
          "neutron_gaia_connection_id": {
            "type": "string"
          },
          "st_atom_receiver_amount": {
            "$ref": "#/definitions/WeightedReceiverAmount"
          }
        },
        "additionalProperties": false
      },
      "PresetHolderFields": {
        "description": "Preset fields are set by the user when instantiating the covenant. use `to_instantiate_msg` implementation method to get `InstantiateMsg`.",
        "type": "object",
        "required": [
          "holder_code",
          "label"
        ],
        "properties": {
          "holder_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "label": {
            "type": "string"
          },
          "withdrawer": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "PresetIbcFee": {
        "type": "object",
        "required": [
          "ack_fee",
          "timeout_fee"
        ],
        "properties": {
          "ack_fee": {
            "$ref": "#/definitions/Uint128"
          },
          "timeout_fee": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "PresetLpFields": {
        "description": "Defines fields relevant to LP module that are known prior to covenant being instantiated. Use `to_instantiate_msg` implemented method to obtain the `InstantiateMsg` by providing the non-deterministic fields.",
        "type": "object",
        "required": [
          "allowed_return_delta",
          "assets",
          "expected_ls_token_amount",
          "expected_native_token_amount",
          "label",
          "lp_code"
        ],
        "properties": {
          "allowed_return_delta": {
            "description": "difference (both ways) we tolerate with regards to the `expected_ls_token_amount`",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "assets": {
            "description": "denominations of native and ls assets",
            "allOf": [
              {
                "$ref": "#/definitions/AssetData"
              }
            ]
          },
          "autostake": {
            "description": "determines whether provided liquidity is automatically staked",
            "type": [
              "boolean",
              "null"
            ]
          },
          "expected_ls_token_amount": {
            "description": "workaround for the current lack of stride redemption rate query. we set the expected amount of ls tokens we expect to receive for the relevant half of the native tokens we have",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "expected_native_token_amount": {
            "description": "amount of native tokens we expect to receive from depositor",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "label": {
            "description": "label for contract to be instantiated with",
            "type": "string"
          },
          "lp_code": {
            "description": "lp contract code",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "single_side_lp_limits": {
            "description": "limits (in `Uint128`) for single side liquidity provision. Defaults to 100 if none are provided.",
            "anyOf": [
              {
                "$ref": "#/definitions/SingleSideLpLimits"
              },
              {
                "type": "null"
              }
            ]
          },
          "slippage_tolerance": {
            "description": "slippage tolerance for providing liquidity",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PresetLsFields": {
        "type": "object",
        "required": [
          "label",
          "ls_code",
          "ls_denom",
          "neutron_stride_ibc_connection_id",
          "stride_neutron_ibc_transfer_channel_id"
        ],
        "properties": {
          "label": {
            "type": "string"
          },
          "ls_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "ls_denom": {
            "type": "string"
          },
          "neutron_stride_ibc_connection_id": {
            "type": "string"
          },
          "stride_neutron_ibc_transfer_channel_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SingleSideLpLimits": {
        "description": "single side lp limits define the highest amount (in `Uint128`) that we consider acceptable to provide single-sided. if asset balance exceeds these limits, double-sided liquidity should be provided.",
        "type": "object",
        "required": [
          "ls_asset_limit",
          "native_asset_limit"
        ],
        "properties": {
          "ls_asset_limit": {
            "$ref": "#/definitions/Uint128"
          },
          "native_asset_limit": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Timeouts": {
        "type": "object",
        "required": [
          "ibc_transfer_timeout",
          "ica_timeout"
        ],
        "properties": {
          "ibc_transfer_timeout": {
            "description": "ibc transfer timeout in seconds",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          },
          "ica_timeout": {
            "description": "ica timeout in seconds",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "WeightedReceiverAmount": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "type": "string",
    "enum": []
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "depositor_address"
        ],
        "properties": {
          "depositor_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "clock_address"
        ],
        "properties": {
          "clock_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lp_address"
        ],
        "properties": {
          "lp_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ls_address"
        ],
        "properties": {
          "ls_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "holder_address"
        ],
        "properties": {
          "holder_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pool_address"
        ],
        "properties": {
          "pool_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "migrate_contracts"
        ],
        "properties": {
          "migrate_contracts": {
            "type": "object",
            "properties": {
              "clock": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "depositor": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "holder": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "lp": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "ls": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "MigrateMsg": {
        "oneOf": [
          {
            "description": "Pauses the clock. No `ExecuteMsg` messages will be executable until the clock is unpaused. Callable only if the clock is unpaused.",
            "type": "object",
            "required": [
              "pause"
            ],
            "properties": {
              "pause": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Unpauses the clock. Callable only if the clock is paused.",
            "type": "object",
            "required": [
              "unpause"
            ],
            "properties": {
              "unpause": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Updates the max gas allowed to be consumed by a tick. This should be no larger than 100_000 less the block max gas so as to save enough gas to process the tick's error.",
            "type": "object",
            "required": [
              "update_tick_max_gas"
            ],
            "properties": {
              "update_tick_max_gas": {
                "type": "object",
                "required": [
                  "new_value"
                ],
                "properties": {
                  "new_value": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_code_id"
            ],
            "properties": {
              "update_code_id": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "manage_whitelist"
            ],
            "properties": {
              "manage_whitelist": {
                "type": "object",
                "properties": {
                  "add": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "remove": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "sudo": null,
  "responses": {
    "clock_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "depositor_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "holder_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "lp_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "ls_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "pool_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
